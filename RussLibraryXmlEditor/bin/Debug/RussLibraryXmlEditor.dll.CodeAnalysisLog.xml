<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 11.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="11.0">
 <Namespaces>
  <Namespace Name="RussLibrary">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'RussLibrary' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="RussLibrary.Controls">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'RussLibrary.Controls' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="RussLibrary.ValueConverter">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'RussLibrary.ValueConverter' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="E:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\bin\Debug\RussLibraryXmlEditor.dll">
   <Modules>
    <Module Name="russlibraryxmleditor.dll">
     <Namespaces>
      <Namespace Name="RussLibrary.Controls">
       <Types>
        <Type Name="EditorWindow" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Show(System.String,System.String,RussLibrary.Controls.XmlEditor,System.Windows.Controls.Control,System.Windows.Media.ImageSource)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Icon" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="EditorWindow.xaml.cs" Line="87">In member 'EditorWindow.Show(string, string, XmlEditor, Control, ImageSource)', correct the casing of 'Icon' in parameter name 'Icon' by changing it to 'icon'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlEditor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="90" Level="Error">'XmlEditor' is coupled with 99 different types from 31 different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above 95 indicates poor maintainability, a class coupling between 95 and 80 indicates moderate maintainability, and a class coupling below 80 indicates good maintainability.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="62">Initialize all static fields in 'XmlEditor' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CodeCompleted" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'XmlEditor.CodeCompleted' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#completionWindow" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'XmlEditor.completionWindow' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#diag_FindNext(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="433">Method 'XmlEditor.diag_FindNext(object, EventArgs)' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(string, string, MessageBoxButton, MessageBoxImage)'. Retrieve the following string(s) from a resource table instead: "Find".</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="423">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'XmlEditor.diag_FindNext(object, EventArgs)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String,System.Int32)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="420">Because the behavior of 'string.IndexOf(string, int)' could vary based on the current user's locale settings, replace this call in 'XmlEditor.diag_FindNext(object, EventArgs)' with a call to 'string.IndexOf(string, int, StringComparison)'. If the result of 'string.IndexOf(string, int, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DoSavePrompt()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="303">Method 'XmlEditor.DoSavePrompt()' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(string, string, MessageBoxButton, MessageBoxImage)'. Retrieve the following string(s) from a resource table instead: "Data Changed".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ErrorList" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="222">Change 'XmlEditor.ErrorList' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FormatXml(System.String,System.Boolean,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="593">Modify 'XmlEditor.FormatXml(string, bool, bool)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="566">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'XmlEditor.FormatXml(string, bool, bool)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="569">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'XmlEditor.FormatXml(string, bool, bool)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="517">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'XmlEditor.FormatXml(string, bool, bool)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="564">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'XmlEditor.FormatXml(string, bool, bool)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="576">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'XmlEditor.FormatXml(string, bool, bool)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#fsw_Changed(System.Object,System.IO.FileSystemEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="147">Method 'XmlEditor.fsw_Changed(object, FileSystemEventArgs)' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(string, string, MessageBoxButton, MessageBoxImage)'. Retrieve the following string(s) from a resource table instead: "Editor".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertClosingTag()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.LastIndexOf(System.String,System.Int32)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="1009">Because the behavior of 'string.LastIndexOf(string, int)' could vary based on the current user's locale settings, replace this call in 'XmlEditor.InsertClosingTag()' with a call to 'string.LastIndexOf(string, int, StringComparison)'. If the result of 'string.LastIndexOf(string, int, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="1013">Because the behavior of 'string.LastIndexOf(string, int)' could vary based on the current user's locale settings, replace this call in 'XmlEditor.InsertClosingTag()' with a call to 'string.LastIndexOf(string, int, StringComparison)'. If the result of 'string.LastIndexOf(string, int, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NoCodeCompleteCharacters" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'XmlEditor.NoCodeCompleteCharacters' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnTextEntered(System.Windows.Input.TextCompositionEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="886">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'XmlEditor.OnTextEntered(TextCompositionEventArgs)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.LastIndexOf(System.String,System.Int32)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="880">Because the behavior of 'string.LastIndexOf(string, int)' could vary based on the current user's locale settings, replace this call in 'XmlEditor.OnTextEntered(TextCompositionEventArgs)' with a call to 'string.LastIndexOf(string, int, StringComparison)'. If the result of 'string.LastIndexOf(string, int, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnTextEntering(System.Windows.Input.TextCompositionEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="ICSharpCode.AvalonEdit.Document.TextDocument.Insert(System.Int32,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="972">Method 'XmlEditor.OnTextEntering(TextCompositionEventArgs)' passes a literal string as parameter 'text' of a call to 'TextDocument.Insert(int, string)'. Retrieve the following string(s) from a resource table instead: "=\"\"".</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="969">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'XmlEditor.OnTextEntering(TextCompositionEventArgs)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.LastIndexOf(System.String,System.Int32)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="949">Because the behavior of 'string.LastIndexOf(string, int)' could vary based on the current user's locale settings, replace this call in 'XmlEditor.OnTextEntering(TextCompositionEventArgs)' with a call to 'string.LastIndexOf(string, int, StringComparison)'. If the result of 'string.LastIndexOf(string, int, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowError(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Development Projects\Source Control\ArtemisModLoader\RussLibraryXmlEditor\Controls" File="XmlEditor.cs" Line="606">Method 'XmlEditor.ShowError(string)' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(string, string, MessageBoxButton, MessageBoxImage)'. Retrieve the following string(s) from a resource table instead: "Xml Editor".</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="RussLibrary.ValueConverter">
       <Types>
        <Type Name="FilenameFormatter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-01-31 11:41:18Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeCompoundWord" Certainty="80" Level="Error">The discrete term 'Filename' in type name 'FilenameFormatter' should be expressed as a compound word, 'FileName'.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506">
   <Name>Avoid excessive class coupling</Name>
   <Description>Types and methods with a high degree of class coupling can be difficult to maintain.</Description>
   <Resolution Name="Type">{0} is coupled with {1} different types from {2} different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above {3} indicates poor maintainability, a class coupling between {3} and {4} indicates moderate maintainability, and a class coupling below {4} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb397994(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182130(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="TypeShouldBeCompoundWord">The discrete term '{0}' in type name {1} should be expressed as a compound word, '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182275(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="11.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
